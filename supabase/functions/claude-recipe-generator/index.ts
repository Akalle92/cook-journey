
import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

// CORS headers for browser requests
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Handle CORS preflight requests
function handleCors(req: Request) {
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      headers: corsHeaders,
    });
  }
}

// Serve HTTP requests
serve(async (req) => {
  // Handle CORS if needed
  const corsResponse = handleCors(req);
  if (corsResponse) return corsResponse;
  
  try {
    // Create Supabase client with the project URL and service key
    const supabaseClient = createClient(
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? "" // Use service role key for unrestricted access
    );
    
    // Parse request body
    let requestData;
    try {
      requestData = await req.json();
    } catch (error) {
      console.error("Error parsing request:", error);
      throw new Error("Invalid request format");
    }
    
    const { url, userId } = requestData;
    
    if (!url) {
      throw new Error("URL is required");
    }
    
    if (!userId) {
      throw new Error("User ID is required");
    }

    console.log(`Processing URL: ${url} for User: ${userId}`);
    
    // Step 1: Try to extract recipe data using the existing extractor
    let recipeData = null;
    let extractionResult = null;
    
    try {
      console.log("Attempting initial recipe extraction with instagram-recipe-extractor");
      extractionResult = await supabaseClient.functions.invoke('instagram-recipe-extractor', {
        body: { url, userId }
      });
      
      if (extractionResult.error) {
        console.log("Error from recipe extractor:", extractionResult.error);
      } else if (extractionResult.data && extractionResult.data.status === 'success') {
        console.log("Recipe extraction successful:", extractionResult.data.method);
        recipeData = extractionResult.data.data;
      } else {
        console.log("Recipe extraction unsuccessful:", extractionResult.data);
      }
    } catch (error) {
      console.error("Error calling instagram-recipe-extractor:", error);
      // Continue with Claude even if extraction fails
    }
    
    // Step 2: Prepare data for Claude to enhance
    let enhancedRecipe;
    const enhancementSource = recipeData ? "extraction" : "url-only";
    
    try {
      // Get Anthropic API key from environment
      const anthropicApiKey = Deno.env.get("ANTHROPIC_API_KEY");
      if (!anthropicApiKey) {
        throw new Error("Anthropic API key is missing from environment variables");
      }
      
      console.log(`Enhancing recipe with Claude (source: ${enhancementSource})`);
      enhancedRecipe = await enhanceRecipeWithClaude(url, recipeData, anthropicApiKey);
      
      if (!enhancedRecipe) {
        throw new Error("Failed to generate or enhance recipe with Claude");
      }
      
      console.log("Claude successfully enhanced/generated recipe data");
    } catch (error) {
      console.error("Error enhancing recipe with Claude:", error);
      // If we have initial extraction data but Claude enhancement failed, use the original data
      if (recipeData) {
        console.log("Falling back to original extracted recipe data");
        enhancedRecipe = recipeData;
      } else {
        throw new Error(`Failed to enhance recipe: ${error.message}`);
      }
    }
    
    // Step 3: Save the enhanced recipe to Supabase
    try {
      // Ensure we have user_id in the recipe data
      enhancedRecipe.user_id = userId;
      enhancedRecipe.source_url = url;
      
      // Add attribution for Claude enhancement
      if (!enhancedRecipe.description) {
        enhancedRecipe.description = "";
      }
      
      if (enhancementSource === "extraction") {
        enhancedRecipe.description += "\n\nRecipe extracted and enhanced with Claude AI.";
      } else {
        enhancedRecipe.description += "\n\nRecipe generated by Claude AI based on the provided URL.";
      }
      
      // Save to Supabase
      console.log("Saving enhanced recipe to database");
      const { data: savedRecipe, error } = await supabaseClient
        .from('recipes')
        .insert([enhancedRecipe])
        .select()
        .single();
      
      if (error) {
        console.error("Error saving enhanced recipe:", error);
        throw new Error(`Failed to save recipe: ${error.message}`);
      }
      
      // Return the saved recipe with claude enhancement info
      return new Response(
        JSON.stringify({
          status: "success",
          data: savedRecipe,
          enhancementSource,
          extraction: extractionResult?.data || null
        }),
        {
          headers: { 
            "Content-Type": "application/json",
            ...corsHeaders
          },
        }
      );
    } catch (error) {
      console.error("Error saving enhanced recipe:", error);
      throw new Error(`Failed to save enhanced recipe: ${error.message}`);
    }
  } catch (error) {
    // Return error response
    console.error("Error processing URL with Claude recipe generator:", error);
    return new Response(
      JSON.stringify({
        status: "error",
        message: error.message,
      }),
      {
        status: 400,
        headers: { 
          "Content-Type": "application/json",
          ...corsHeaders
        },
      }
    );
  }
});

// Function to enhance recipe data with Claude
async function enhanceRecipeWithClaude(url: string, recipeData: any, apiKey: string): Promise<any> {
  const systemPrompt = `You are a professional recipe development assistant that helps convert content from URLs into well-structured recipes. Your task is to either enhance existing recipe data that was extracted, or generate a complete recipe based on a URL if no recipe data was found.`;
  
  let userPrompt = "";
  
  if (recipeData) {
    // Prompt for enhancing existing recipe data
    userPrompt = `I have extracted recipe data from the URL: ${url}
    
Here is the extracted data:
${JSON.stringify(recipeData, null, 2)}

Please improve and enhance this recipe by:
1. Ensuring the title is clear, concise, and descriptive
2. Organizing and formatting the ingredients list properly
3. Ensuring instructions are clear, complete, and in a logical order
4. Adding any missing details, reasonable estimates for prep/cook time if they're missing
5. Determining a reasonable difficulty level based on the complexity
6. Suggesting appropriate tags or categories if they're missing
7. Providing a good description if one is not included

Format your response as a valid JSON object with these fields:
{
  "title": "Recipe Title",
  "description": "Brief recipe description",
  "image_url": "URL to image if available",
  "ingredients": ["Ingredient 1", "Ingredient 2", ...],
  "instructions": ["Step 1", "Step 2", ...],
  "prep_time": number (minutes),
  "cook_time": number (minutes),
  "servings": number,
  "category": "Main Course/Dessert/etc",
  "cuisine": "Italian/Mexican/etc",
  "tags": ["tag1", "tag2", ...],
  "difficulty_level": "Easy/Medium/Hard",
  "meal_type": "Breakfast/Lunch/Dinner/etc"
}

Preserve any existing correct data, and only enhance or add missing information. Ensure the JSON is properly formatted and valid.`;
  } else {
    // Prompt for generating a recipe from a URL when no data was extracted
    userPrompt = `I have a URL (${url}) that appears to be related to food or recipes, but my recipe extraction tool couldn't extract structured data from it.

Please visit or analyze this URL and generate a complete recipe based on any information you can find there. If it's obviously not a recipe or food-related content, please indicate that instead.

Please create a complete recipe with:
1. A clear, descriptive title
2. A complete list of ingredients with measurements
3. Step-by-step instructions
4. Reasonable estimates for prep/cook time
5. Appropriate difficulty level
6. Relevant tags or categories
7. A good description of the dish

Format your response as a valid JSON object with these fields:
{
  "title": "Recipe Title",
  "description": "Brief recipe description",
  "image_url": "URL to image if available or null",
  "ingredients": ["Ingredient 1", "Ingredient 2", ...],
  "instructions": ["Step 1", "Step 2", ...],
  "prep_time": number (minutes),
  "cook_time": number (minutes),
  "servings": number,
  "category": "Main Course/Dessert/etc",
  "cuisine": "Italian/Mexican/etc",
  "tags": ["tag1", "tag2", ...],
  "difficulty_level": "Easy/Medium/Hard",
  "meal_type": "Breakfast/Lunch/Dinner/etc"
}

Ensure the JSON is properly formatted and valid. If it's clearly not a recipe, respond with a JSON object with a single field "error" explaining why.`;
  }
  
  // Call Claude API
  console.log("Calling Claude API to enhance recipe");
  const response = await fetch("https://api.anthropic.com/v1/messages", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "x-api-key": apiKey,
      "anthropic-version": "2023-06-01"
    },
    body: JSON.stringify({
      model: "claude-3-sonnet-20240229",
      max_tokens: 4000,
      system: systemPrompt,
      messages: [
        {
          role: "user",
          content: userPrompt
        }
      ]
    })
  });
  
  if (!response.ok) {
    const errorText = await response.text();
    console.error("Claude API error:", errorText);
    throw new Error(`Claude API error: ${response.status} - ${errorText}`);
  }
  
  const claudeResponse = await response.json();
  console.log("Claude API response received");
  
  // Extract the JSON response from Claude's text
  try {
    const responseText = claudeResponse.content[0].text;
    
    // Look for JSON object in the response
    const jsonMatch = responseText.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      console.error("No JSON found in Claude response:", responseText);
      throw new Error("No valid JSON found in Claude response");
    }
    
    const recipeJson = JSON.parse(jsonMatch[0]);
    
    // Check if Claude returned an error indicating this isn't a recipe
    if (recipeJson.error) {
      console.log("Claude determined this is not a recipe:", recipeJson.error);
      throw new Error(`Not a recipe: ${recipeJson.error}`);
    }
    
    return recipeJson;
  } catch (error) {
    console.error("Error parsing Claude response:", error);
    throw new Error(`Failed to parse Claude response: ${error.message}`);
  }
}
